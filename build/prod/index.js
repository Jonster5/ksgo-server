"use strict";var e=require("http"),s=require("url"),t=require("ws");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=n(e),i=n(s),r=n(t);const a=[{version:1,name:"empty",size:1500,friction:.999,stars:[],planets:[],asteroids:[],spawn:[{x:0,y:0,width:1500,height:750}]},{version:1,name:"singlesun",size:1500,friction:.999,stars:[{x:750,y:375,diameter:50,mass:100,color:"gold"}],planets:[],asteroids:[],spawn:[{x:375,y:187.5,width:100,height:100},{x:375,y:562.5,width:100,height:100},{x:1125,y:187.5,width:100,height:100},{x:1125,y:562.5,width:100,height:100}]}];class l{constructor(e,s,t="",[n=10,o=""]){switch(this.key=t,this.users=new Map,this.maxUsers=n,this.lobbies=s,this.server=e,o){case"empty":this.map=a[0];break;case"singlesun":this.map=a[1];break;default:return void(this.map=a[0])}this.AWSS=new r.default.Server({noServer:!0}),this.GWSS=new r.default.Server({noServer:!0}),this.AWSS.on("connection",((e,s)=>{e.on("message",this.onAWSSMessage),e.on("close",this.onAWSSClose)})),this.GWSS.on("connection",((e,s)=>{e.on("message",this.onGWSSMessage),e.on("close",this.onGWSSClose)})),this.updateloop=setInterval(this.update,15)}update(){}kill(){clearInterval(this.updateloop),this.AWSS.close(),this.GWSS.close(),this.lobbies.delete(this.key)}onAWSSMessage(e){console.log(e)}onAWSSClose(e){}onGWSSMessage(e){}onGWSSClose(e){}}const c={name:"Server",id:null,address:"ws://192.168.1.157:8000"};let d;const S=()=>{console.info("MWS: Connected"),d.send(JSON.stringify({id:"server-connect",content:{name:c.name,address:c.address}}))},h=({data:e})=>{const s=JSON.parse(e);"server-connect-confirm"===s.id&&(c.id=s.content,console.log(`server registered as ${c.id}`))},g=e=>{console.info(e.message),setTimeout(u,1e3)},p=()=>{console.info(d.readyState)},u=()=>{console.info("MWS: Connecting..."),d=new r.default("wss://ksgo-master.herokuapp.com"),d.onopen=S,d.onmessage=h,d.onerror=g,d.close=p},m=process.env.PORT||8e3;console.clear(),u();const f=o.default.createServer(),v=new r.default.Server({noServer:!0}),y=new Map,W=new Map;v.on("connection",((e,s)=>{e.on("close",(s=>{for(let[s,t]of W)if(t.socket===e){console.log(`User disconnected: ${s}`),W.delete(s);break}})),e.on("message",(s=>{let t=JSON.parse(s);if("user-connect"===t.id)W.has(t.content.clientid)||(W.set(t.content.clientid,{name:t.content.name,socket:e}),console.log(`User connected: ${t.content.clientid}`));else if("create-lobby"===t.id)if(y.size<=5){let s=Math.random().toString(36).substring(7).toUpperCase();for(;y.has(s);)s=Math.random().toString(36).substring(7).toUpperCase();y.set(s,new l(f,y,s,t.content)),console.log(s),e.send(JSON.stringify({id:"create-lobby-confirm",content:{key:s}}))}else e.send(JSON.stringify({id:"create-lobby-reject",content:{reason:"Game server is full"}}))}))})),f.listen(m),f.on("upgrade",((e,s,t)=>{const n=i.default.parse(e.url).pathname;console.log(n),"/"===n?v.handleUpgrade(e,s,t,(s=>{v.emit("connection",s,e)})):y.has(n.split("/")[1])?"stat"===n.split("/")[2]?y.get(n.split("/")[1]).AWSS.handleUpgrade(e,s,t,(s=>{y.get(n.split("/")[1]).AWSS.emit("connections",s,e)})):"game"===n.split("/")[2]&&y.get(n.split("/")[1]).GWSS.handleUpgrade(e,s,t,(s=>{y.get(n.split("/")[1]).GWSS.emit("connections",s,e)})):(console.log(n),s.destroy())}));
